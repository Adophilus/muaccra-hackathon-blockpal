// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "User",
    columns: [
      { name: "phoneNumber", type: "string" },
      { name: "messageId", type: "string" },
      { name: "country", type: "string", notNull: true, defaultValue: "" },
      { name: "firstName", type: "string", notNull: true, defaultValue: "" },
      { name: "lastName", type: "string", notNull: true, defaultValue: "" },
      {
        name: "kycDateOfBirth",
        type: "string",
        notNull: true,
        defaultValue: "",
      },
      { name: "kycIdType", type: "string", notNull: true, defaultValue: "" },
      {
        name: "kycDocumentNumber",
        type: "string",
        notNull: true,
        defaultValue: "",
      },
      { name: "kycStatus", type: "string" },
    ],
    revLinks: [{ column: "user", table: "OffRampTemporaryTransaction" }],
  },
  {
    name: "OffRampTemporaryTransaction",
    columns: [
      { name: "beneficiaryId", type: "string" },
      { name: "user", type: "link", link: { table: "User" } },
      { name: "usdAmount", type: "float" },
      { name: "status", type: "string", defaultValue: "pending" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type OffRampTemporaryTransaction =
  InferredTypes["OffRampTemporaryTransaction"];
export type OffRampTemporaryTransactionRecord = OffRampTemporaryTransaction &
  XataRecord;

export type DatabaseSchema = {
  User: UserRecord;
  OffRampTemporaryTransaction: OffRampTemporaryTransactionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Blocverse-Development-es1pni.us-east-1.xata.sh/db/whatsapp-social-fi-bot",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
